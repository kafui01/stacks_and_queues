
1. What is the main difference between a stack and a queue?
   STACK--uses LIFO (last in first out) method to access and 
          add data elements

   QUEUE-- uses FIFO (First in first out) method to access and 
           add data elements.

2. What are the similarities between stacks and queues?
   ANS.
   They are both non-primitive data structures

3. Imagine you are an engineer tasked with implementing the 
   UNDO and REDO options in a word processor such as Microsoft Word. 
   Which data structure would you use for each option and why?
   ANS.
   i would use the STACK data structure for both the UNDO and the REDO.
   The reason being that, since stack uses the last-in first-out method,
   every event would be stacked up on top of each other like in the order
   in which they occur.
     So to UNDO an event, i would simply use the .pop() method to remove
   the most recent event which happens to be the last action to be taken 
   into a seperate stack. 
     To REDO an event, i would use the .push() method to add the removed 
   event which was placed into the other seperate stack back unto the 
   first stack.

   this will make it more efficient.



           Programming Questions
1. Given a string, reverse it using a stack. For example, the 
   string "Bloc!" should be converted to "!colB".

   function reverseStr(str) {
     var stack = [];
     for(var i = 0; i < str.length; i++){
       stack.push(str[i]);
     }

     var newString = '';
     while (stack.length > 0){
       newString += stack.pop();
       console.log(newString);
     }
   }
   reverseStr('Bloc!'); 


2.  Implement the pop method of a stack using one queue. 
    Make a FIFO data structure mirror the functionality of a 
    LIFO data structure. Since the internal list is not the 
    same as defined in the checkpoint,
    it may help to rewrite the pseudocode first.

class Stack {
    constructor(){
     this.pop = function(queue){
       var newQueue = [];
       var itemToRemove = [];
       
       for(var i=0;i<queue.length; i++){
         if(i==queue.length-1){
           itemToRemove.push(queue[i]);
         }else{
           newQueue.push(queue[i]);
         }
       }
       
       return itemToRemove;   
       
     }
   }
}





1. Implement the enqueue and dequeue methods defined 
   in the checkpoint inside your own Queue class.

  class Queue {
   
      constructor () {
          this.store = {};
          this.front = 0;
          this.end = 0;
      }
  }
 

  Queue.prototype.enqueue = function (data) {
      this.store[this.end] = data;
      this.end++;
  };
 

  Queue.prototype.dequeue = function () {
      if (this.front === this.end) return null;
 
      const data = this.store[this.front];
      delete this.store[this.front];
      this.front++;
      return data;
  };
 







   